#include "kl.h"
#include "ka.h"

bool KL_active = false;
HHOOK KL_handle;

// bitmask: MOD_ALT/CONTROL/SHIFT/WIN, KLM_L3,KLM_L5
BYTE KL_mods;

KLY KL_kly;

bool KL_phys[255];
UCHAR KL_phys_mods[255];

void KL_activate() {
    KL_active = true;
    SetWindowsHookEx(WH_KEYBOARD_LL, KL_proc, nil, 0);
}

void KL_deactivate() {
    KL_active = false;
    UnhookWindowsHookEx(KL_handle);
}

#define RawThisEvent() 0
#define StopThisEvent() 1
#define PassThisEvent() CallNextHookEx(NULL, aCode, wParam, lParam)
LRESULT CALLBACK KL_proc(int aCode, WPARAM wParam, LPARAM lParam) {
    if (aCode != HC_ACTION)
        return PassThisEvent();
    PKBDLLHOOKSTRUCT ev = (PKBDLLHOOKSTRUCT) lParam;
    DWORD flags = ev->flags;
    SC sc = (SC) ev->scanCode;
    //VK vk = (VK) ev->vkCode;
    bool down = (wParam != WM_KEYUP && wParam != WM_SYSKEYUP);
    // non-physical key events:
    //   injected key presses (generated by programs - keybd_event(), SendInput()),
    //   their (non-injected) release counterparts,
    //   fake shift presses and releases by driver accompanying numpad keys
    //     (so that numlock'ed keys are independent of shift state yet have the same 2 levels),
    //   LControl press/release by OS (the window system) triggered by AltGr RAlt event
    // Only check here for injected presses and corresponding releases.
    bool faked;
    faked = (flags & LLKHF_INJECTED || (!(KL_phys[sc]) && !down));
    if (flags & LLKHF_EXTENDED)
        sc |= 0x100;
    if (faked || sc >= KPN) {
        return PassThisEvent();
    }
    KL_phys[sc] = down;

    unsigned char lv = 0;
    printf("/%d", KL_mods);
    if (KL_mods & KLM_L3)
        lv = 3;
    if (KL_mods & KLM_L5 && !lv)
        lv += 5;
    if (KL_mods & MOD_SHIFT)
        lv++;
    LK lk = KL_kly[lv][sc];
    if (!lk.active) {
        printf(" na%s", (down ? "_ " : "^\n"));
        return PassThisEvent();
    }

    unsigned char mods = lk.mods, mods_sca = lk.mods & (MOD_SHIFT | MOD_CONTROL | MOD_ALT);
    #if ENABLE_KLM_SC
    if (mods & KLM_SC) {
        printf(" send sc%03x}%s", lk.binding, (down ? "_" : "^\n"));
        keybd_event((VK)ev->vkCode, lk.binding, (down ? KEYEVENTF_SCANCODE : KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP), 0);
    } else
    #endif // ENABLE_KLM_SC
    if (mods == KLM_WCHAR) {
        INPUT inp;
        inp.type = INPUT_KEYBOARD;
        inp.ki.wVk = 0;
        inp.ki.dwFlags = KEYEVENTF_UNICODE;
        inp.ki.dwExtraInfo = 0;
        inp.ki.wScan = sc;
        inp.ki.time = GetTickCount();
        SendInput(1, &inp, sizeof(INPUT));
    } else if (mods & KLM_KA) {
        printf(" ka_call ka%d(%d){", lk.binding, down);
        KA_call(lk.binding, down);
        printf("}%s", (down ? "_" : "^\n"));
    } else {
        UCHAR kl_mods_sca = KL_mods & (MOD_SHIFT | MOD_CONTROL | MOD_ALT);
        char mods1 = mods_sca - kl_mods_sca;
        printf(" send vk%02x -/%d:%d:%d}%s", lk.binding, mods1, mods_sca, kl_mods_sca, (down ? "_" : "^\n"));
        if (mods1) {
            char mod_shift0 = ((mods_sca & MOD_SHIFT) - (kl_mods_sca & MOD_SHIFT))>>2, mod_shift = mod_shift0;
            char mod_control0 = ((mods_sca & MOD_CONTROL) - (kl_mods_sca & MOD_CONTROL))>>1, mod_control = mod_control0;
            char mod_alt0 = (mods_sca & MOD_ALT) - (kl_mods_sca & MOD_ALT), mod_alt = mod_alt0;

            INPUT inps[7];
            int tick_count = GetTickCount();
            int mods_count = (mod_shift & 1) + (mod_control & 1) + (mod_alt & 1);
            int i;
            int inps_count = 1 + mods_count * 2;
            fori (i, 0, inps_count) {
                VK vk1 = lk.binding;
                DWORD flags = 0;
                if (mod_shift) {
                    printf("+");
                    flags = (mod_shift > 0 ? 0 : KEYEVENTF_KEYUP);
                    mod_shift = 0;
                    vk1 = VK_LSHIFT;
                } else if (mod_control) {
                    printf("^");
                    flags = (mod_control > 0 ? 0 : KEYEVENTF_KEYUP);
                    mod_control = 0;
                    vk1 = VK_LCONTROL;
                } else if (mod_alt) {
                    printf("!%d;", i);
                    flags = (mod_alt > 0 ? 0 : KEYEVENTF_KEYUP);
                    mod_alt = 0;
                    vk1 = VK_LMENU;
                } else {
                    printf("-");
                    mod_shift = -mod_shift0;
                    mod_control = -mod_control0;
                    mod_alt = -mod_alt0;
                    vk1 = lk.binding;
                }
                INPUT *inp = &(inps[i]);
                inp->type = INPUT_KEYBOARD;
                inp->ki.wVk = vk1;
                inp->ki.dwFlags = flags;
                inp->ki.dwExtraInfo = 0;
                inp->ki.wScan = sc;
                inp->ki.time = tick_count;
            }

            printf("si%d{", inps_count);
            fori (i, 0, inps_count) {
                printf("vk%02x", inps[i].ki.wVk);
            }
            printf("}");
            SendInput(inps_count, inps, sizeof(INPUT));
        } else {
            keybd_event(lk.binding, sc, (down ? 0 : KEYEVENTF_KEYUP), 0);
        }
    }

    return StopThisEvent();
}
#undef RawThisEvent
#undef StopThisEvent
#undef PassThisEvent

KLY *KL_bind_kly = &KL_kly;
bool KL_bind_lvls[KLVN];

void KL_bind(SC sc, UINT mods, SC binding) {
    LK lk;
    UINT lv;
    fori (lv, 0, len(KL_bind_lvls)) {
        int lv1 = lv+1;
        if (!KL_bind_lvls[lv]) {
            printf("bind sc%03x:%d not ", sc, lv1);
            continue;
        }
        SC binding1 = binding;
        lk.active = true;
        lk.mods = mods | KLM_SC;
        if (mods & KLM_SC) {
            binding1 = OS_sc_to_vk(binding);
        }
        lk.binding = binding1;
        if (lv % 2) {
            UINT mods0 = mods;
            if (KL_bind_lvls[lv - 1]) {
                mods |= MOD_SHIFT;
            }
            printf("+(%d:%d)", mods0, mods);
        }
        (*KL_bind_kly)[lv][sc] = lk;
        if (mods & KLM_WCHAR) {
            printf("bind sc%03x:%d u%04x ", sc, lv1, binding);
        } else if (mods & KLM_SC) {
            printf("bind sc%03x:%d sc%03x=>vk%02x ", sc, lv1, binding, binding1);
        } else if (mods & KLM_KA) {
            printf("bind sc%03x:%d ka%d ", sc, lv1, binding);
        } else {
            printf("bind sc%03x:%d vk%02x ", sc, lv1, binding);
        }
    }
    puts("");
}

typedef struct {
    // Primary Language ID
    LANGID lang;
    // Bindings
    KLY kly;
} KLC;

size_t KL_klcs_size = 0;
size_t KL_klcs_count = 0;
KLC *KL_klcs = (KLC*)calloc((KL_klcs_size = 4), sizeof(KLC));

void KL_add_lang(LANGID lang) {
    if ((KL_klcs_count+=1) > KL_klcs_size) {
        KL_klcs = (KLC*)realloc(KL_klcs, (KL_klcs_size *= 1.5) * sizeof(KLC));
    }
    KLC *klc = KL_klcs + KL_klcs_count - 1;
    klc->lang = lang;
}

KLY *KL_lang_to_kly(LANGID lang) {
    UINT i;
    fori(i, 0, KL_klcs_count) {
        if (KL_klcs[i].lang == lang)
            return &(KL_klcs[i].kly);
    }
    return nil;
}

void KL_activate_lang(LANGID lang) {
    printf("lang %04d ", lang);
    CopyMemory(KL_kly, KL_lang_to_kly(LANG_NEUTRAL), sizeof(KLY));
    KLY *kly = KL_lang_to_kly(lang);
    int lvi, ki;
    if (kly != nil) {
        fori(lvi, 0, KLVN) {
            fori(ki, 0, KPN) {
                LK lk = (*kly)[lvi][ki];
                if (lk.active) {
                    printf("sc%03x:%d ", ki, lvi+1);
                    LK *lk1 = &(KL_kly[lvi][ki]);
                    *lk1 = lk;
                }
            }
        }
    }
    fori (lvi, 0, KLVN) {
        fori (ki, 0, KPN) {
            LK *p_lk = &(KL_kly[lvi][ki]), lk = *p_lk;
            if (lk.active) {
                if (lk.mods & KLM_WCHAR) {
                    WCHAR w = lk.binding;
                    printf("sc%03x:%d->", ki, lvi+1);
                    KP kp = OS_wchar_to_vk(w);
                    if (kp.vk) {
                        printf("vk%02x/%d", kp.vk, kp.mods);
                        lk.mods = kp.mods;
                        lk.binding = kp.vk;
                    }
                    printf(";");
                }
                *p_lk = lk;
            }
        }
    }
    puts("");
}

void KL_set_bind_lang(LANGID lang) {
    KLY *kly = KL_lang_to_kly(lang);
    if (kly == nil) {
        KL_add_lang(lang);
        kly = KL_lang_to_kly(lang);
    }
    KL_bind_kly = kly;
}

void KL_bind_lvls_zero() {
    UINT i;
    fori (i, 0, len(KL_bind_lvls)) {
        KL_bind_lvls[i] = false;
    }
}

void KL_bind_lvls_init() {
    KL_bind_lvls_zero();
    KL_bind_lvls[0] = true;
    KL_bind_lvls[1] = true;
}

void KL_init() {
    ZeroMemory(KL_kly, sizeof(KL_kly));
    ZeroMemory(KL_phys, sizeof(KL_phys));
    KL_add_lang(LANG_NEUTRAL);
    KL_bind_kly = KL_lang_to_kly(LANG_NEUTRAL);
    UINT sc;
    fori (sc, 0, len(KL_phys_mods)) {
        VK vk = OS_sc_to_vk(sc);
        UCHAR mod = 0;
        switch (vk) {
        case VK_SHIFT: case VK_LSHIFT: case VK_RSHIFT:
            mod = MOD_SHIFT;
            break;
        case VK_CONTROL: case VK_LCONTROL: case VK_RCONTROL:
            mod = MOD_CONTROL;
            break;
        case VK_MENU: case VK_LMENU: case VK_RMENU:
            mod = MOD_ALT;
            break;
        case VK_LWIN: case VK_RWIN:
            mod = MOD_WIN;
            break;
        }
        KL_phys_mods[sc] = mod;
    }
}
